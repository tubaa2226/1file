# Importing Libraries

import numpy as np

import pandas as pd

import ast

import requests

import streamlit as st

from sklearn.feature_extraction.text import CountVectorizer

from sklearn.metrics.pairwise import cosine_similarity

import pickle

# 1. Data Loading and Preparation

# Load the movie and credits datasets

movies = pd.read_csv('/tmdb_5000_credits.csv')

credits = pd.read_csv('/tmdb_5000_movies.csv')

# Merge movies and credits based on the title column

movies = movies.merge(credits, on='title')

# Select important columns from the merged dataset

movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew',

'vote_average', 'runtime', 'release_date']]

# Function to convert the stringified list of dictionaries into a list of names

def convert(text):

L = []

for i in ast.literal_eval(text):

L.append(i['name'])

return L
# Dropping rows with missing values

movies.dropna(inplace=True)

# Applying the conversion function to genres and keywords columns

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

# Function to extract top 3 cast members

def convert_cast(text):

L = []

for i in ast.literal_eval(text):

L.append(i['name'])

return L[:3]

# Applying the cast conversion function

movies['cast'] = movies['cast'].apply(convert_cast)

# Function to fetch the director from the crew

def fetch_director(text):

L = []

for i in ast.literal_eval(text):

if i['job'] == 'Director':

L.append(i['name'])

return L

# Applying the director extraction function

movies['crew'] = movies['crew'].apply(fetch_director)

# Function to collapse lists into strings for tags generation

def collapse(L):

L1 = []

for i in L:

L1.append(i.replace(" ", ""))

return L1
# Applying the collapse function to the respective columns

movies['cast'] = movies['cast'].apply(collapse)

movies['crew'] = movies['crew'].apply(collapse)

movies['genres'] = movies['genres'].apply(collapse)

movies['keywords'] = movies['keywords'].apply(collapse)

# Tokenizing overview column

movies['overview'] = movies['overview'].apply(lambda x: x.split())

# 2. Creating Tags for Each Movie

# Combining overview, genres, keywords, cast, and crew into a single 'tags' column

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast']

+ movies['crew']

# Dropping unwanted columns

new = movies.drop(columns=['overview', 'genres', 'keywords', 'cast', 'crew'])

# Converting the list of words into a string for vectorization

new['tags'] = new['tags'].apply(lambda x: " ".join(x))

# 3. Feature Extraction and Similarity Calculation

# Vectorizing the tags using CountVectorizer (max 5000 features, English stopwords)

cv = CountVectorizer(max_features=5000, stop_words='english')

vector = cv.fit_transform(new['tags']).toarray()

# Calculating cosine similarity between the vectors

similarity = cosine_similarity(vector)

# 4. Saving the Processed Data

# Save the movies DataFrame and similarity matrix using pickle

pickle.dump(new, open('movie_list.pkl', 'wb'))

pickle.dump(similarity, open('similarity.pkl', 'wb'))
# 5. Streamlit Frontend for Movie Recommendation System

# Function to set a background image in Streamlit

def set_background_image(image_url):

page_bg_img = '''

<style>

.stApp {

background-image: url(%s);

background-size: cover;

}

</style>

''' % image_url

st.markdown(page_bg_img, unsafe_allow_html=True)

# Main function to display the application interface

def main():

# Setting the background image for the app

background_image_url =

"https://repository-images.githubusercontent.com/275336521/20d38e00-6634-11eb-9d1f-6a5

232d0f84f"

set_background_image(background_image_url)

# Custom CSS to style select box and text

custom_css = """

<style>

body {

background-color: #4699d4;

color: #ffffff;

font-family: Arial, sans-serif;

}

select {

background-color: #000000 !important;

color: #ffffff !important;

}
label {

color: #ffffff !important;

}

</style>

"""

st.markdown(custom_css, unsafe_allow_html=True)

# Title of the App

st.title('Movie Recommender System')

# Load movie list and similarity matrix from pickle files

movie_list = pickle.load(open('movie_list.pkl', 'rb'))

similarity = pickle.load(open('similarity.pkl', 'rb'))

# Convert movie_list to DataFrame if needed

movies = pd.DataFrame(movie_list)

# Function to fetch the poster of a movie

def fetch_poster(movie_id):

url =

"https://api.themoviedb.org/3/movie/{}?api_key=8265bd1679663a7ea12ac168da84d2e8&lan

guage=en-US".format(movie_id)

try:

data = requests.get(url)

data.raise_for_status() # Raise an HTTPError for bad responses

data = data.json()

poster_path = data['poster_path']

full_path = "https://image.tmdb.org/t/p/w500/" + poster_path

return full_path

except requests.exceptions.RequestException as e:

st.error(f"Error fetching poster: {e}")

return None

# Function to recommend movies based on a selected movie
def recommend(movie):

index = movies[movies['title'] == movie].index[0]

distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])

recommended_movie_names = []

recommended_movie_posters = []

for i in distances[1:6]:

movie_id = movies.iloc[i[0]].movie_id

recommended_movie_posters.append(fetch_poster(movie_id))

recommended_movie_names.append(movies.iloc[i[0]].title)

return recommended_movie_names, recommended_movie_posters

# New Feature: Display Movie Details

def display_movie_details(movie):

movie_data = movies[movies['title'] == movie].iloc[0]

st.subheader(f"Details for {movie}")

st.write(f"Release Date: {movie_data['release_date']}")

st.write(f"Rating: {movie_data['vote_average']}/10")

st.write(f"Runtime: {movie_data['runtime']} minutes")

return movie_data['movie_id']

# New Feature: Search by Actor

def search_by_actor(actor_name):

movie_data = movies[movies['cast'].apply(lambda x: actor_name in x)]

if not movie_data.empty:

st.write(f"Movies featuring {actor_name}:")

for movie in movie_data['title']:

st.write(movie)

else:

st.write(f"No movies found with {actor_name}.")

# New Feature: Filter by Genre

selected_genre = st.selectbox("Filter by Genre", ['All'] +

list(movies['genres'].explode().unique()))
# Dropdown to select a movie from the list

if selected_genre != 'All':

movie_list_filtered = movies[movies['genres'].apply(lambda genres: selected_genre in

genres)]

else:

movie_list_filtered = movies

selected_movie_name = st.selectbox('List of movies', movie_list_filtered['title'].values)

# Button to trigger recommendation

if st.button('Recommend'):

movie_id = display_movie_details(selected_movie_name)

recommended_movie_names, recommended_movie_posters =

recommend(selected_movie_name)

# Display recommended movies and their posters

cols = st.columns(5)

for i in range(5):

with cols[i]:

st.text(recommended_movie_names[i])

st.image(recommended_movie_posters[i])

# New Feature: Search by Actor Input

actor_name = st.text_input("Search movies by actor:")

if actor_name:

search_by_actor(actor_name)

# Run the main function

if __name__ == "__main__":

main()
